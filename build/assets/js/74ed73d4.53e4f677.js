"use strict";(self.webpackChunksoftware_designs_and_algorithms=self.webpackChunksoftware_designs_and_algorithms||[]).push([[7668],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||o;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9528:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294);function i(e){let{src:t,title:n}=e;return a.createElement("iframe",{title:n,src:t,style:{width:"100%",height:"500px",border:0,borderRadius:"4px",overflow:"hidden"},allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"})}},5128:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));n(9528);const o={sidebar_position:6},r="6. \ud83d\udcda Home Task",l={unversionedId:"functional-programming/hometask",id:"functional-programming/hometask",title:"6. \ud83d\udcda Home Task",description:"The home task should be done using TypeScript.",source:"@site/docs/4-functional-programming/hometask.md",sourceDirName:"4-functional-programming",slug:"/functional-programming/hometask",permalink:"/docs/functional-programming/hometask",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"5. Functional programming in JS/TS",permalink:"/docs/functional-programming/is_js_functional"},next:{title:"1. Design Patterns",permalink:"/docs/design-patterns/design_patterns"}},s={},p=[{value:"Testing the project",id:"testing-the-project",level:2},{value:"Task",id:"task",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Tips",id:"tips",level:2},{value:"Evaluation Criteria",id:"evaluation-criteria",level:2}],m={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"6--home-task"},"6. \ud83d\udcda Home Task"),(0,i.kt)("p",null,"The home task should be done using TypeScript."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The starter code for the home task is located in ",(0,i.kt)("em",{parentName:"p"},"docs/4-functional-programming/hometask")," folder")),(0,i.kt)("h2",{id:"testing-the-project"},"Testing the project"),(0,i.kt)("p",null,"In the project directory, run the command bellow to install all required packages:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install\n")),(0,i.kt)("p",null,"To try to run an example.ts, enter the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start\n")),(0,i.kt)("p",null,"To run the tests, enter the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm run test\n")),(0,i.kt)("h2",{id:"task"},"Task"),(0,i.kt)("p",null,"Imagine that there is some executor, or taxi driver, whatever, who needs to reach some clients. Each client has some ",(0,i.kt)("inlineCode",{parentName:"p"},"position")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"reward")," for reaching him. Also, he might have a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"demands"),". If he does, it means that the executor should have such ",(0,i.kt)("inlineCode",{parentName:"p"},"possibilities")," to meet that ",(0,i.kt)("inlineCode",{parentName:"p"},"demands"),"."),(0,i.kt)("p",null,"The main task is to write a code inside of the ",(0,i.kt)("inlineCode",{parentName:"p"},"show")," function in ",(0,i.kt)("inlineCode",{parentName:"p"},"/src/main.ts"),". This function takes two parameters and should return the string in the format below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"This executor meets the demands of only 3 out of 4 clients\n\nAvailable clients sorted by highest reward:\nname: Philip, distance: 30.364, reward: 600\nname: John, distance: 21.378, reward: 250\nname: Gregor, distance: 20.025, reward: 230\n")),(0,i.kt)("p",null,"But before starting, you need to implement the missed parts of some utils and algebraic types"),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"During the implementation of each of the functions in utils, suggest you verify it in the tests. It is also a good example of how the function would be used\nSteps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"First of all, you need to finish the implementation of the ",(0,i.kt)("inlineCode",{parentName:"li"},"pipe")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"flow")," functions (",(0,i.kt)("inlineCode",{parentName:"li"},"src/fp/utils.ts"),"). The ",(0,i.kt)("inlineCode",{parentName:"li"},"flow")," currently accepts only a maximum of up to 3 functions, you need to extend it up to 4 by adding new overloads. Same with the pipe, extend it up to 4 and provide the realization."),(0,i.kt)("li",{parentName:"ol"},"Next, you can move to ",(0,i.kt)("inlineCode",{parentName:"li"},"src/fp/maybe.ts"),". Get to know what it is, look at the examples in the tests, and implement the code of the ",(0,i.kt)("inlineCode",{parentName:"li"},"fold")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"fromNullable")),(0,i.kt)("li",{parentName:"ol"},"Move to ",(0,i.kt)("inlineCode",{parentName:"li"},"src/fp/either.ts")," and implement code of the ",(0,i.kt)("inlineCode",{parentName:"li"},"map"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"fold")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"fromPromise"),"."),(0,i.kt)("li",{parentName:"ol"},"Get to know what is it inside the ",(0,i.kt)("inlineCode",{parentName:"li"},"src/fp/setoid.ts and ord.ts"),", implement the ",(0,i.kt)("inlineCode",{parentName:"li"},"sort")," inside of the ",(0,i.kt)("inlineCode",{parentName:"li"},"array.ts")),(0,i.kt)("li",{parentName:"ol"},"When all preparations are done, and all tests inside the ",(0,i.kt)("inlineCode",{parentName:"li"},"test/fp")," are passing ",(0,i.kt)("inlineCode",{parentName:"li"},"npm run test:fp"),", you can start to implement the code of the ",(0,i.kt)("inlineCode",{parentName:"li"},"src/main.ts")),(0,i.kt)("li",{parentName:"ol"},"Fix the ",(0,i.kt)("inlineCode",{parentName:"li"},"getClients")," function, because it returns the raw data of the client, where ",(0,i.kt)("inlineCode",{parentName:"li"},"demands")," is just ",(0,i.kt)("inlineCode",{parentName:"li"},"Array<Demand> | null"),". You need to transform it to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Maybe<Array<Demand>>")),(0,i.kt)("li",{parentName:"ol"},"Implement the code of the ",(0,i.kt)("inlineCode",{parentName:"li"},"show")," function")),(0,i.kt)("p",null,"The details of the ",(0,i.kt)("inlineCode",{parentName:"p"},"show")," function:"),(0,i.kt)("p",null,"The first line represents how many of the clients the executor can reach.\nIf all of them: ",(0,i.kt)("inlineCode",{parentName:"p"},"This executor meets all demands of all clients!"),"\nIf some of them: ",(0,i.kt)("inlineCode",{parentName:"p"},"This executor meets the demands of only ${number} out of ${number} clients"),"\nIf none of them: ",(0,i.kt)("inlineCode",{parentName:"p"},"This executor cannot meet the demands of any client!"),". This would be the only line, and the result itself would be ",(0,i.kt)("inlineCode",{parentName:"p"},"left")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Remember that you should check if the executor meets the demands of the particular client only if the demands are none! If it is none - the demands is met by default")),(0,i.kt)("p",null,"The first line of the table should be:\n",(0,i.kt)("inlineCode",{parentName:"p"},"Available clients sorted by ")," + ",(0,i.kt)("inlineCode",{parentName:"p"},"highest reward")," in case if ",(0,i.kt)("inlineCode",{parentName:"p"},"SortBy.reward")," was passed, or ",(0,i.kt)("inlineCode",{parentName:"p"},"distance to executor")," in case of ",(0,i.kt)("inlineCode",{parentName:"p"},"SortBy.distance")),(0,i.kt)("h2",{id:"tips"},"Tips"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Try to avoid imperative constructions (if, while, for) as much as possible. But still, keep it simple"),(0,i.kt)("li",{parentName:"ul"},"Check the usage examples of different functions and type classes in the tests"),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"fold"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"map")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"getOrElse")," to get or manipulate the data inside the type class. Avoid using the ",(0,i.kt)("inlineCode",{parentName:"li"},"either.right")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"maybe.value"))),(0,i.kt)("h2",{id:"evaluation-criteria"},"Evaluation Criteria"),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Only ",(0,i.kt)("inlineCode",{parentName:"li"},"main.spec")," test is passed"),(0,i.kt)("li",{parentName:"ol"},"Some tests not passed"),(0,i.kt)("li",{parentName:"ol"},"All tests are passed, and some imperative constructions are in use (like ",(0,i.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"while"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"switch")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"for")," statements, ternary operator allowed), and no ",(0,i.kt)("inlineCode",{parentName:"li"},"any")," keywords"),(0,i.kt)("li",{parentName:"ol"},"All tests are passed, imperative constructions are not in use, and no ",(0,i.kt)("inlineCode",{parentName:"li"},"any")," keyword")))}c.isMDXComponent=!0}}]);